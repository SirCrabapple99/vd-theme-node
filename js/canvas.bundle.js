"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkvd_theme_node"] = self["webpackChunkvd_theme_node"] || []).push([["canvas"],{

/***/ "./static/js/defaultColors.js":
/*!************************************!*\
  !*** ./static/js/defaultColors.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rawColors: () => (/* binding */ rawColors),\n/* harmony export */   semanticColors: () => (/* binding */ semanticColors)\n/* harmony export */ });\nconst rawColors = await fetch(\"https://raw.githubusercontent.com/nexpid/VendettaThemeUtil/main/colors/200.0/RawColors.json\").then(r => r.json());\nconst semanticColors = await fetch(\"https://raw.githubusercontent.com/nexpid/VendettaThemeUtil/main/colors/200.0/SemanticColors.json\").then(r => r.json());\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://vd-theme-node/./static/js/defaultColors.js?");

/***/ }),

/***/ "./static/js/hitregions.js":
/*!*********************************!*\
  !*** ./static/js/hitregions.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   getHits: () => (/* binding */ getHits),\n/* harmony export */   getHitsFromInterval: () => (/* binding */ getHitsFromInterval)\n/* harmony export */ });\n/* harmony import */ var _render_var__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render/var */ \"./static/js/render/var.js\");\n\n\nvar hitRegions = [];\n\nfunction getHits(x, y) {\n    console.log(hitRegions, x, y);\n    return hitRegions.filter(({ region }) => x >= region.x && y >= region.y && x <= region.x + region.width && y <= region.y + region.height);\n}\n\nfunction getHitsFromInterval(xInterval, yInterval) {\n    const [x, y] = (0,_render_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(720 * xInterval, 1466 * yInterval);\n    return getHits(x, y);\n}\n\nfunction add(data) {\n    hitRegions.push(data);\n}\n\nfunction clear() {\n    hitRegions = [];\n}\n\n\n//# sourceURL=webpack://vd-theme-node/./static/js/hitregions.js?");

/***/ }),

/***/ "./static/js/render/canvas.js":
/*!************************************!*\
  !*** ./static/js/render/canvas.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _var__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./var */ \"./static/js/render/var.js\");\n/* harmony import */ var _chatHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatHeader */ \"./static/js/render/chatHeader.js\");\n/* harmony import */ var _chatInputBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chatInputBar */ \"./static/js/render/chatInputBar.js\");\n/* harmony import */ var _chat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chat */ \"./static/js/render/chat.js\");\n/* harmony import */ var _hitregions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hitregions */ \"./static/js/hitregions.js\");\n/* harmony import */ var _defaultColors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../defaultColors */ \"./static/js/defaultColors.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_defaultColors__WEBPACK_IMPORTED_MODULE_5__]);\n_defaultColors__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* eslint-disable no-empty */\n\n\n\n\n\n\n\n// Returns hex string for color\nfunction getSemanticColor(key, theme) {\n    return _defaultColors__WEBPACK_IMPORTED_MODULE_5__.semanticColors[key].colors[theme];\n}\n\nfunction getRawColor(key) {\n    return _defaultColors__WEBPACK_IMPORTED_MODULE_5__.rawColors[key];\n}\n\nfunction tryDrawRef({ ctx, w, h }, { ref }) {\n    ctx.save();\n    ctx.globalAlpha = ref.alpha;\n    try {\n        ctx.drawImage(ref.image, 0, 0, w, h);\n    } catch {}\n    ctx.restore();\n}\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst importcss = urlParams.get(\"css\");\nif (importcss) {\n    var link = document.createElement(\"link\");\n    link.setAttribute(\"href\", importcss);\n    link.setAttribute(\"type\", \"text/css\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    link.setAttribute(\"media\", \"screen,print\");\n    document.head.appendChild(link);\n}\n\nconst canvas = document.createElement(\"canvas\");\ncanvas.width = (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(720)[0];\ncanvas.height = (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1466)[0];\ndocument.body.appendChild(canvas);\n\nwindow.setmessages = async () => {};\n\nfunction renderCanvas(options) {\n    (0,_hitregions__WEBPACK_IMPORTED_MODULE_4__.clear)();\n    // Get the canvas element\n    const [w, h] = [canvas.width, canvas.height];\n    const ctx = canvas.getContext(\"2d\");\n    let render = (f) => f({ ctx, w, h }, options);\n    ctx.clearRect(0, 0, w, h);\n\n    render(_chat__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    render(_chatInputBar__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n    render(_chatHeader__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n    options.ref?.image && render(tryDrawRef);\n}\n\nlet options = {\n    getSColor: (k) => getSemanticColor(k, \"dark\"),\n    getRColor: (k) => getRawColor(k, \"dark\"),\n    getBackground: () => undefined,\n    messages: [],\n    channel: { type: \"GC\", name: \"hehe\" },\n};\nwindow.options = options;\n\nlet loadedImages = {};\n\nasync function loadImage(uri) {\n    return new Promise((res) => {\n        if (!uri) return res(null);\n        if (loadedImages[uri]) return res(loadedImages[uri]);\n        let img = new Image();\n        img.src = uri;\n        loadedImages[uri] = img;\n        img.onload = function () {\n            return res(img);\n        };\n        img.onerror = function () {\n            return res(null);\n        };\n    });\n}\n\n(async () => {\n    for (const font of [\n        new FontFace(\"gg-sans\", \"url(assets/fonts/ggsans-Normal.ttf)\", {\n            style: \"normal\",\n            weight: 400,\n        }),\n        new FontFace(\"gg-sans\", \"url(assets/fonts/ggsans-Medium.ttf)\", {\n            style: \"normal\",\n            weight: 500,\n        }),\n        new FontFace(\"gg-sans\", \"url(assets/fonts/ggsans-Semibold.ttf)\", {\n            style: \"normal\",\n            weight: 600,\n        }),\n        new FontFace(\"gg-sans\", \"url(assets/fonts/ggsans-Bold.ttf)\", {\n            style: \"normal\",\n            weight: 700,\n        }),\n        new FontFace(\"SourceCodePro\", \"url(assets/fonts/SourceCodePro-Semibold.ttf)\", {\n            style: \"normal\",\n            weight: 500,\n        }),\n    ]) {\n        document.fonts.add(font);\n        await font.load();\n    }\n\n    window.getHitsFromInterval = (...a) => (0,_hitregions__WEBPACK_IMPORTED_MODULE_4__.getHitsFromInterval)(...a);\n\n    window.targetFunction = async (o) => {\n        let bg = o.getBackground();\n        let bgimage = await loadImage(bg?.url);\n        let refimage = await loadImage(o.ref?.url);\n\n        for (const message of o.messages) {\n            if (message.author?.avatarUrl) message.author.avatar = await loadImage(message.author.avatarUrl);\n            if (message.referencedMessage?.author?.avatarUrl)\n                message.referencedMessage.author.avatar = await loadImage(message.referencedMessage.author.avatarUrl);\n            if (message.embeds?.length)\n                for (const embed of message.embeds) {\n                    if (embed.image?.url) {\n                        embed.image.image = await loadImage(embed.image.url); // can't use proxyUrl because ublock origin thinks discord proxy is bad\n                    }\n                    if (embed.thumbnail?.url) {\n                        embed.thumbnail.image = await loadImage(embed.thumbnail.url);\n                    }\n                }\n        }\n\n        renderCanvas({\n            ...o,\n            getBackground: () => ({ ...bg, image: bgimage }),\n            ref: { ...o.ref, image: refimage },\n        });\n    };\n\n    renderCanvas(options);\n    window._isCanvasLoaded = true;\n    window._onLoadCallbacks.forEach((cb) => cb());\n})();\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://vd-theme-node/./static/js/render/canvas.js?");

/***/ }),

/***/ "./static/js/render/chat.js":
/*!**********************************!*\
  !*** ./static/js/render/chat.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ renderChat)\n/* harmony export */ });\n/* harmony import */ var _var__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./var */ \"./static/js/render/var.js\");\n/* harmony import */ var _hitregions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hitregions */ \"./static/js/hitregions.js\");\n/* eslint-disable no-unused-vars */\n\n\n\n/*\nlet samplemessages = [{\n    author: {\n        name: \"fres\",\n        avatar: img\n    },\n    timestamp: \"Today at 16:57\",\n    content: [\n        { content: 'normal text ', type: 'text' },\n        { content: 'and inline code text', type: 'inlineCode' },\n        { content: ' hehe', type: 'text' },\n        { content: '!', type: 'text' }\n    ]\n}]\n*/\n\n// TODO fix calculating embed height\n\n// The X at which a text line starts in a message content\nconst messageContentStartX = 120;\n\nconst messageContentWidth = 575;\n\n// The X at which a text line starts in an embed\nconst embedContentStartX = 150;\n\n// The width of the area in an embed where text can be\nconst embedContentWidth = 519;\n\nconst emptyNode = { type: \"text\", content: \"\" };\n\nfunction trimTextToWidth(ctx, text, addEllipsis, maxWidth) {\n    const measure = ctx.measureText;\n\n    if (measure(text).width <= maxWidth) return text;\n    if (!text.length) return \"\";\n\n    for (let i = text.length - 1; i > 0; i--) {\n        let trimmed = text.substring(0, i) + (addEllipsis ? \"...\" : \"\");\n        if (measure(trimmed).width <= maxWidth) return trimmed;\n    }\n    return \"\";\n}\n\n// chatgpt\nfunction androidColorToHex(androidColor) {\n    if (!androidColor) return null;\n    return \"#\" + (androidColor + 0x1000000).toString(16);\n}\n\nfunction renderChat({ ctx, w, h }, { getSColor, getBackground, messages }) {\n    let BGColor = getSColor(\"BG_BASE_PRIMARY\");\n    let textColor = getSColor(\"TEXT_NORMAL\");\n    let spoilerColor = getSColor(\"BACKGROUND_SECONDARY\");\n    let authorColor = getSColor(\"INTERACTIVE_ACTIVE\");\n    let timestampColor = getSColor(\"TEXT_MUTED\");\n    let replyLineColor = getSColor(\"BACKGROUND_ACCENT\");\n    let replyContentColor = getSColor(\"ICON_SECONDARY\");\n\n    const scaled = (0,_var__WEBPACK_IMPORTED_MODULE_0__.scaledCtx)(ctx);\n\n    const heightTransform = () => ctx.getTransform().transformPoint().y;\n\n    // #region Background\n    ctx.fillStyle = BGColor;\n    ctx.fillRect(0, 0, w, h);\n    (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"BG_BASE_PRIMARY\", region: { x: 0, y: 0, width: w, height: h } });\n    let bg = getBackground();\n    let bgImage = bg?.image;\n    if (bgImage) {\n        ctx.save();\n        let [chatWidth, chatHeight] = [720, 1360];\n        var ratio = Math.max(chatWidth / bgImage.width, chatHeight / bgImage.height);\n        var [width, height] = [bgImage.width * ratio, bgImage.height * ratio];\n        // RN blurRadius to pixel = blurRadius * (screenDPI / 160) / 2 | my screen dpi is 384 so I'll multiply blur radius by 384 / 160\n        if (bg.blur) ctx.filter = `blur(${bg.blur * 2.4}px)`;\n        scaled.drawImage(bgImage, -(width - chatWidth) / 2, 106 - (height - chatHeight) / 2, width, height);\n        ctx.restore();\n    }\n    // #endregion\n\n    ctx.save();\n    [...messages].reverse().map((message) => {\n        let [textx, texty] = [120, 1289];\n\n        let textFont = \"500 30px gg-sans\";\n        let visitors = {\n            text: {\n                measure: (node) => {\n                    scaled.setFont(textFont);\n                    return scaled.measureText(node.content).width;\n                },\n                render: (node) => {\n                    scaled.setFont(textFont);\n                    ctx.fillStyle = textColor;\n                    scaled.fillText(node.content, textx, texty);\n                    textx += scaled.measureText(node.content).width;\n                },\n            },\n            inlineCode: {\n                measure: (node) => {\n                    scaled.setFont(\"500 25px SourceCodePro\");\n                    return scaled.measureText(node.content).width;\n                },\n                render: (node) => {\n                    scaled.setFont(\"500 25px SourceCodePro\");\n                    let twidth = scaled.measureText(node.content).width;\n                    ctx.fillStyle = spoilerColor;\n                    scaled.fillRect(textx, texty - 30, twidth, 38);\n                    ctx.fillStyle = textColor;\n                    scaled.fillText(node.content, textx, texty);\n                    textx += scaled.measureText(node.content).width;\n                },\n            },\n            link: {\n                measure: (node) => {\n                    return node.content.map((node) => visitors[node.type].measure(node)).reduce((p, a) => p + a, 0);\n                },\n                render: (node) => {\n                    let backup = textColor;\n                    textColor = getSColor(\"TEXT_LINK\");\n                    node.content.map((node) => visitors[node.type].render(node));\n                    textColor = backup;\n                },\n            },\n        };\n\n        let lines = Math.floor(message.content.map((node) => visitors[node.type].measure(node)).reduce((p, a) => p + a, 0) / messageContentWidth);\n\n        scaled.translate(0, -lines * 42);\n\n        if (message.embeds?.length) scaled.translate(0, -message.embeds.map((embed) => calculateEmbedHeight(embed) + 16).reduce((p, a) => p + a, 0));\n\n        let height = 0;\n        if (message.author?.avatarUrl) {\n            height += 70;\n            ctx.save();\n            ctx.imageSmoothingQuality = \"high\";\n            ctx.beginPath();\n            scaled.arc(22 + 75 / 2, 1218 + 75 / 2, 75 / 2, 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.clip();\n            scaled.drawImage(message.author.avatar, 22, 1218, 75, 75);\n            ctx.restore();\n\n            // Author\n            scaled.setFont(\"600 30.25px gg-sans\");\n            ctx.fillStyle = message.colorString || authorColor;\n            scaled.fillText(message.author.name, 120, 1249);\n            let textw = scaled.measureText(message.author.name).width;\n            (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"INTERACTIVE_ACTIVE\", region: { x: 120, y: 1249 + heightTransform() - 24, width: textw * _var__WEBPACK_IMPORTED_MODULE_0__.factor, height: 24 } });\n            // Timestamp\n            scaled.setFont(\"500 22px gg-sans\");\n            ctx.fillStyle = timestampColor;\n            scaled.fillText(message.timestamp, textw + 120 + 16, 1249);\n            let twidth = ctx.measureText(message.timestamp).width;\n            (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"TEXT_MUTED\", region: { x: textw + 120 + 16, y: 1249 + heightTransform() - 24, width: twidth, height: 24 } });\n        }\n\n        height += 48;\n        if (message.referencedMessage) {\n            height += 46;\n            ctx.save();\n            // Reply arrow thing\n            ctx.fillStyle = replyLineColor;\n            ctx.strokeStyle = replyLineColor;\n            (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"BACKGROUND_ACCENT\", region: { x: 58, y: 1185 + heightTransform(), width: 54, height: 21 } });\n            scaled.fillRect(58, 1193, 4, 17);\n            scaled.fillRect(66, 1185, 46, 4);\n            ctx.beginPath();\n            scaled.arc(66, 1193, 6, (Math.PI / 2) * 2, (Math.PI / 2) * 3);\n            scaled.setLineWidth(4);\n            ctx.stroke();\n\n            // PFP in reply\n            ctx.imageSmoothingQuality = \"high\";\n            ctx.beginPath();\n            scaled.arc(120 + 30 / 2, 1172 + 30 / 2, 30 / 2, 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.clip();\n            scaled.drawImage(message.referencedMessage.author.avatar, 120, 1172, 30, 30);\n            ctx.restore();\n\n            // Name in reply\n            ctx.fillStyle = message.colorString || authorColor;\n            scaled.fillText(message.referencedMessage.author.name, 158, 1195);\n            let twidth = scaled.measureText(message.referencedMessage.author.name).width;\n            (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"INTERACTIVE_ACTIVE\", region: { x: 158, y: 1195 + heightTransform() - 24, width: twidth * _var__WEBPACK_IMPORTED_MODULE_0__.factor, height: 24 } });\n            let textx = twidth;\n\n            ctx.fillStyle = replyContentColor;\n            scaled.setFont(\"500 22px gg-sans\");\n            for (const node of message.referencedMessage.content) {\n                scaled.fillText(node.content, textx + 167, 1195);\n                let twidth = ctx.measureText(node.content).width; // using ctx because this is only used for the hit region\n                (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"ICON_SECONDARY\", region: { x: textx + 167, y: 1195 + heightTransform() - 24, width: twidth, height: 24 } });\n            }\n        }\n\n        function splitAST(node, maxX) {\n            // Returns the node width / maxX, if it's above 1 it should be split\n            let getOverflow = (node) => (textx + visitors[node.type].measure(node)) / maxX;\n            if (getOverflow(node) <= 1) return [node];\n\n            function splitAt(node, n) {\n                let content = node.content;\n                switch (node.type) {\n                    case \"text\":\n                    case \"inlineCode\":\n                        return (() => {\n                            if (!n)\n                                return {\n                                    sub: node,\n                                    rest: emptyNode,\n                                };\n                            let splitIndex = content.lastIndexOf(\" \", content.length - n);\n                            return {\n                                sub: { ...node, content: content.slice(0, splitIndex === -1 ? -n : splitIndex) },\n                                rest: { ...node, content: content.slice(splitIndex === -1 ? -n : splitIndex + 1) },\n                            };\n                        })();\n                    case \"link\":\n                        return (() => {\n                            function whereToSplitLinkContent(link) {\n                                for (let i = 0; i < link.content.length; i++) {\n                                    let length = getOverflow({ ...link, content: link.content.slice(0, i + 1) });\n                                    if (length > 1) return i;\n                                }\n                                return -1;\n                            }\n\n                            // the whole link fits in 1 line.\n                            if (whereToSplitLinkContent(node) === -1)\n                                return {\n                                    sub: node,\n                                    rest: emptyNode,\n                                };\n                            let index = whereToSplitLinkContent(node);\n                            let partToSub = node.content.slice(0, index + 1);\n                            let nodeToSub = partToSub[partToSub.length - 1];\n                            partToSub[partToSub.length - 1] = splitAt(nodeToSub, n).sub;\n                            let rest = [splitAt(nodeToSub, n).rest, ...node.content.slice(index + 1)];\n                            return {\n                                sub: { ...node, content: partToSub },\n                                rest: { ...node, content: rest },\n                            };\n                        })();\n                }\n            }\n\n            let i = 0;\n            while (getOverflow(splitAt(node, i).sub) > 1) {\n                i++;\n            }\n\n            const { sub, rest } = splitAt(node, i);\n            return [sub, rest];\n        }\n\n        function renderLine(node, startX, maxX, leading = 46) {\n            let [sub, rest] = splitAST(node, maxX);\n            visitors[sub.type].render(sub);\n            if (rest) {\n                textx = startX;\n                texty += leading;\n                renderLine(rest, startX, maxX, leading);\n            }\n        }\n\n        for (const node of message.content) {\n            renderLine(node, messageContentStartX, messageContentStartX + messageContentWidth, 42);\n        }\n\n        function calculateEmbedHeight(embed) {\n            let height = 64;\n            let stextfont = textFont;\n            if (embed.title?.length) {\n                textFont = \"600 30px gg-sans\";\n                let lines = Math.ceil(embed.title.map((node) => visitors[node.type].measure(node)).reduce((p, a) => p + a, 0) / embedContentWidth);\n                height += lines * 42;\n            }\n            if (embed.description?.length) {\n                textFont = \"500 25.7px gg-sans\";\n                let lines = Math.ceil(embed.description.map((node) => visitors[node.type].measure(node)).reduce((p, a) => p + a, 0) / embedContentWidth);\n                height += lines * 44;\n            }\n            if (embed.image?.image) {\n                var ratio = Math.min(517 / embed.image.image.width, 400 / embed.image.image.height);\n                height += embed.image.image.height * ratio + 2;\n            }\n            textFont = stextfont;\n            return height;\n        }\n\n        if (message.embeds?.length)\n            for (const embed of message.embeds) {\n                texty += 24;\n                ctx.beginPath();\n                scaled.roundRect(120, texty, 577, calculateEmbedHeight(embed), 30);\n                (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"BACKGROUND_SECONDARY\", region: { x: 120, y: texty + heightTransform(), width: 577, height: calculateEmbedHeight(embed) } });\n                ctx.fillStyle = embed.backgroundColor ?? getSColor(\"BACKGROUND_SECONDARY\");\n                ctx.fill();\n                ctx.save();\n                ctx.clip();\n                ctx.fillStyle = androidColorToHex(embed.borderLeftColor) ?? getSColor(\"BACKGROUND_TERTIARY\");\n                scaled.fillRect(120, texty, 8, calculateEmbedHeight(embed));\n                (0,_hitregions__WEBPACK_IMPORTED_MODULE_1__.add)({ color: \"BACKGROUND_TERTIARY\", region: { x: 120, y: texty + heightTransform(), width: 8, height: calculateEmbedHeight(embed) } });\n                ctx.restore();\n                textx = 150;\n                texty += 46;\n\n                // temporary\n                texty += 24 + 16;\n\n                let stextfont = textFont;\n                textFont = \"600 30px gg-sans\";\n                //let xlimit = embed.thumbnail?.image ? 400 : 690;\n                for (const node of embed.title) {\n                    renderLine(node, embedContentStartX, embedContentStartX + embedContentWidth, 40);\n                }\n                textFont = stextfont;\n\n                textx = 150;\n                texty += 48;\n\n                textFont = \"500 25.7px gg-sans\";\n                for (const node of embed.description) {\n                    renderLine(node, embedContentStartX, embedContentStartX + embedContentWidth, 35);\n                }\n                textFont = stextfont;\n\n                if (embed.image?.image) {\n                    var ratio = Math.min(517 / embed.image.image.width, 400 / embed.image.image.height);\n                    ctx.beginPath();\n                    scaled.roundRect(150, texty + 23, embed.image.image.width * ratio, embed.image.image.height * ratio, 30);\n                    ctx.save();\n                    ctx.clip();\n                    scaled.drawImage(embed.image.image, 150, texty + 23, embed.image.image.width * ratio, embed.image.image.height * ratio);\n                    ctx.restore();\n                }\n            }\n        scaled.translate(0, -height);\n    });\n\n    ctx.restore();\n}\n\n\n//# sourceURL=webpack://vd-theme-node/./static/js/render/chat.js?");

/***/ }),

/***/ "./static/js/render/chatHeader.js":
/*!****************************************!*\
  !*** ./static/js/render/chatHeader.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ renderChatHeader)\n/* harmony export */ });\n/* harmony import */ var _var__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./var */ \"./static/js/render/var.js\");\n/* harmony import */ var _svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../svg */ \"./static/js/svg.js\");\n\n\n\nfunction renderChatHeader({ ctx, w, h }, { getSColor, getRColor, pings, channel }) {\n    let bgColor = getSColor(\"BACKGROUND_MOBILE_SECONDARY\");\n    let buttonsColor = getSColor(\"INTERACTIVE_NORMAL\");\n    let channelIconColor = getSColor(\"CHANNEL_ICON\");\n    let separatorColor = getSColor(\"BACKGROUND_TERTIARY\");\n    let pingColor = getSColor(\"BUTTON_OUTLINE_DANGER_BORDER\");\n    let pingNumberColor = getRColor(\"WHITE_500\");\n    let channelTitleColor = getSColor(\"HEADER_PRIMARY\");\n\n    ctx.save();\n    ctx.fillStyle = bgColor;\n    ctx.shadowColor = separatorColor;\n    ctx.shadowBlur = 0;\n    ctx.shadowOffsetY = (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1.5);\n    ctx.fillRect(0, 0, ...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(720, 105));\n    ctx.restore();\n\n    // hamburger icon\n    ctx.fillStyle = buttonsColor;\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(37, 42, 33, 4));\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(37, 51.5, 33, 4));\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(37, 61, 33, 4));\n\n    // #region Ping number\n    if (pings) {\n        ctx.fillStyle = bgColor;\n        ctx.beginPath();\n        ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(78, 65, 21), 0, 2 * Math.PI);\n        ctx.fill();\n\n        ctx.fillStyle = pingColor;\n        ctx.beginPath();\n        ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(78, 65, 15), 0, 2 * Math.PI);\n        ctx.fill();\n\n        ctx.save();\n        ctx.font = `bold ${(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(23)}px gg-sans`;\n        ctx.fillStyle = pingNumberColor;\n        ctx.textAlign = \"center\";\n        ctx.fillText(pings, ...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(78, 73));\n        ctx.restore();\n    }\n    // #endregion\n\n    // Channel icon\n    ctx.save();\n    ctx.fillStyle = channelIconColor;\n    ctx.translate(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(120, 37));\n    ctx.scale(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1.4, 1.4));\n    _svg__WEBPACK_IMPORTED_MODULE_1__[\"default\"].members.fill(ctx);\n    ctx.restore();\n\n    // Channel title\n    ctx.save();\n    ctx.font = `600 ${(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(31)}px gg-sans`;\n    ctx.fillStyle = channelTitleColor;\n    ctx.fillText(channel.name, ...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(169, 67));\n    ctx.restore();\n\n    // Buttons on top bar\n    ctx.save();\n    ctx.fillStyle = buttonsColor;\n    if (true) {\n        ctx.translate(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(477, 30));\n        ctx.scale(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1.9, 1.9));\n        _svg__WEBPACK_IMPORTED_MODULE_1__[\"default\"].call.fill(ctx);\n        ctx.translate(43, 0);\n        _svg__WEBPACK_IMPORTED_MODULE_1__[\"default\"].videocall.fill(ctx);\n        ctx.translate(44, 0);\n        _svg__WEBPACK_IMPORTED_MODULE_1__[\"default\"].members.fill(ctx);\n    } else {}\n    ctx.restore();\n}\n\n\n//# sourceURL=webpack://vd-theme-node/./static/js/render/chatHeader.js?");

/***/ }),

/***/ "./static/js/render/chatInputBar.js":
/*!******************************************!*\
  !*** ./static/js/render/chatInputBar.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ renderChatInputBar)\n/* harmony export */ });\n/* harmony import */ var _var__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./var */ \"./static/js/render/var.js\");\n\n\nfunction renderChatInputBar({ ctx, w, h }, { getSColor, channel }) {\n    let BGColor = getSColor(\"BG_BASE_PRIMARY\");\n    let separatorColor = getSColor(\"INPUT_BACKGROUND\");\n    let ButtonBGColor = getSColor(\"REDESIGN_BUTTON_SECONDARY_ALT_BACKGROUND\");\n    let inputBGColor = getSColor(\"REDESIGN_CHAT_INPUT_BACKGROUND\");\n    let EmojiPickerBtnColor = getSColor(\"INTERACTIVE_NORMAL\");\n    let ButtonColor = getSColor(\"REDESIGN_BUTTON_SECONDARY_ALT_TEXT\");\n    let placeholderColor = getSColor(\"TEXT_MUTED\");\n\n    // #region Background\n    ctx.save();\n    ctx.shadowColor = separatorColor;\n    ctx.shadowBlur = 0;\n    ctx.shadowOffsetY = (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(-1.5);\n\n    ctx.fillStyle = BGColor;\n    ctx.fillRect(0, (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1359)[0], w, h - (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(1360));\n    ctx.restore();\n    // #endregion\n\n    ctx.save();\n    // #region Background for input\n    ctx.fillStyle = inputBGColor;\n    ctx.beginPath();\n    ctx.roundRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(105, 1372.5, 510, 75.6, 40));\n    ctx.fill();\n    // #endregion\n\n    // #region Background for buttons\n    ctx.fillStyle = ButtonBGColor;\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(53.5, 1410.5, 37.4), 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(668.5, 1410.5, 37.4), 0, 2 * Math.PI);\n    ctx.fill();\n    // #endregion\n\n    ctx.font = `${(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(30)}px gg-sans`;\n    ctx.fillStyle = placeholderColor;\n    let chattext = \"Message \";\n    chattext += channel.type === \"GC\" ? \"\" : channel.type === \"DM\" ? \"@\" : \"#\";\n    chattext += channel.name;\n    ctx.fillText(chattext, ...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(131, 1422));\n\n    ctx.fillStyle = ButtonColor;\n    // Attachment plus\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(40, 1409, 27, 3));\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(52, 1397, 3, 27));\n\n    // Voice note mic\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(668.5, 1410.6, 11), 0, 1 * Math.PI);\n    ctx.lineWidth = (0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(3.5)[0];\n    ctx.strokeStyle = ButtonColor;\n    ctx.stroke();\n    ctx.fillRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(666.5, 1420, 4, 9));\n    ctx.beginPath();\n    ctx.roundRect(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(663, 1394, 11, 23, 100));\n    ctx.fill();\n\n    // Emoji picker icon\n    ctx.fillStyle = EmojiPickerBtnColor;\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(576.5, 1410.5, 19), 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.fillStyle = inputBGColor;\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(569, 1403, 3.6), 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(584, 1403, 3.6), 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(...(0,_var__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(576.5, 1412.5, 11), 0, 1 * Math.PI);\n    ctx.fill();\n    ctx.restore();\n}\n\n\n//# sourceURL=webpack://vd-theme-node/./static/js/render/chatInputBar.js?");

/***/ }),

/***/ "./static/js/render/var.js":
/*!*********************************!*\
  !*** ./static/js/render/var.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ scale),\n/* harmony export */   factor: () => (/* binding */ factor),\n/* harmony export */   s: () => (/* binding */ s),\n/* harmony export */   scaledCtx: () => (/* binding */ scaledCtx)\n/* harmony export */ });\nconst factor = 1;\nfunction scale(...a) {\n    return a.map((e) => e * factor);\n}\n\nfunction scaledCtx(ctx) {\n    return {\n        fillRect: (...a) => ctx.fillRect(...scale(...a)),\n        roundRect: (...a) => ctx.roundRect(...scale(...a)),\n        fillText: (t, ...a) => ctx.fillText(t, ...scale(...a)),\n        setFont: (f) =>\n            (ctx.font = f\n                .split(\" \")\n                .map((e) => (e.endsWith(\"px\") ? `${parseFloat(e) * factor}px` : e))\n                .join(\" \")),\n        measureText: (text) => ({ ...ctx.measureText(text), width: ctx.measureText(text).width / factor }),\n        arc: (x, y, radius, ...a) => ctx.arc(...scale(x, y, radius), ...a),\n        drawImage: (image, ...a) => ctx.drawImage(image, ...scale(...a)),\n        translate: (...a) => ctx.translate(...scale(...a)),\n        setLineWidth: (v) => (ctx.lineWidth = v * factor),\n        scale: (...a) => ctx.scale(...scale(...a)),\n    };\n}\n\nfunction s(n) {\n    return n * factor;\n}\n\n\n//# sourceURL=webpack://vd-theme-node/./static/js/render/var.js?");

/***/ }),

/***/ "./static/js/svg.js":
/*!**************************!*\
  !*** ./static/js/svg.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst SVG = {\n    call: [\n        'M11 5V3C16.515 3 21 7.486 21 13H19C19 8.589 15.411 5 11 5ZM17 13H15C15 10.795 13.206 9 11 9V7C14.309 7 17 9.691 17 13ZM11 11V13H13C13 11.896 12.105 11 11 11ZM14 16H18C18.553 16 19 16.447 19 17V21C19 21.553 18.553 22 18 22H13C6.925 22 2 17.075 2 11V6C2 5.447 2.448 5 3 5H7C7.553 5 8 5.447 8 6V10C8 10.553 7.553 11 7 11H6C6.063 14.938 9 18 13 18V17C13 16.447 13.447 16 14 16Z'\n    ],\n    videocall: [\n        'M21.526 8.149C21.231 7.966 20.862 7.951 20.553 8.105L18 9.382V7C18 5.897 17.103 5 16 5H4C2.897 5 2 5.897 2 7V17C2 18.104 2.897 19 4 19H16C17.103 19 18 18.104 18 17V14.618L20.553 15.894C20.694 15.965 20.847 16 21 16C21.183 16 21.365 15.949 21.526 15.851C21.82 15.668 22 15.347 22 15V9C22 8.653 21.82 8.332 21.526 8.149Z'\n    ],\n    members: [\n        'M14 8.00598C14 10.211 12.206 12.006 10 12.006C7.795 12.006 6 10.211 6 8.00598C6 5.80098 7.794 4.00598 10 4.00598C12.206 4.00598 14 5.80098 14 8.00598ZM2 19.006C2 15.473 5.29 13.006 10 13.006C14.711 13.006 18 15.473 18 19.006V20.006H2V19.006Z',\n        'M20.0001 20.006H22.0001V19.006C22.0001 16.4433 20.2697 14.4415 17.5213 13.5352C19.0621 14.9127 20.0001 16.8059 20.0001 19.006V20.006Z',\n        'M14.8834 11.9077C16.6657 11.5044 18.0001 9.9077 18.0001 8.00598C18.0001 5.96916 16.4693 4.28218 14.4971 4.0367C15.4322 5.09511 16.0001 6.48524 16.0001 8.00598C16.0001 9.44888 15.4889 10.7742 14.6378 11.8102C14.7203 11.8418 14.8022 11.8743 14.8834 11.9077Z'\n    ],\n\n};\n\nconst Icons = Object.keys(SVG).reduce((obj, key) => ({\n  ...obj,\n    [key]: {\n        paths: SVG[key].map(icon => new Path2D(icon)),\n        fill: (ctx) => Icons[key].paths.map(path => ctx.fill(path))\n    }\n}), {});\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Icons);\n\n//# sourceURL=webpack://vd-theme-node/./static/js/svg.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./static/js/render/canvas.js"));
/******/ }
]);